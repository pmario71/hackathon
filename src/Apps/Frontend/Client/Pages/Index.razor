@page "/"
@using Frontend.Shared
@using System.Net.WebSockets
@using System.Text
@using System.Text.Json

@inject HttpClient _httpClient;

<PageTitle>Index</PageTitle>

<h1>Trigger Test Scenarios</h1>

<table class="table">
    <thead>
        <tr>
            <th>Action</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><button class="btn btn-secondary btn-lg" style="width: 150px;height: 80px" disabled="@_teststatus.TestRunning" @onclick="OnStartRegressionTest">Regression Test</button></td>
            <td>Run regression tests, that make sure that all implemented functionality works end-to-end.</td>
        </tr>
        <tr>
            <td><button class="btn btn-secondary btn-lg" style="width: 150px;height: 80px" disabled="@_teststatus.TestRunning" @onclick="OnStartStressTest">Stress Test</button></td>
            <td>Run stress tests, that make sure that all implemented functionality works end-to-end.</td>
        </tr>
    </tbody>
</table>

@if (_teststatus.TestRunning)
{
    <div class="jumbotron bg-light" style="padding: 6px" >
        
        <h4>Test running ...</h4>
        @_teststatus.TestStatusMessage

    </div>    
}

@code {
    CancellationTokenSource _disposalTokenSource = new CancellationTokenSource();
    ClientWebSocket _webSocket = new ClientWebSocket();

    TestStatus _teststatus = new TestStatus();

    private async Task OnStartRegressionTest()
    {
        var request = new StartTestRequest { TestLevel = TestLevel.RegressionTest };
        await _httpClient.PostAsJsonAsync<StartTestRequest>("TestControl", request);

        _teststatus.TestStarted("Started Regression Test!");
    }

    private async Task OnStartStressTest()
    {
        var request = new StartTestRequest { TestLevel = TestLevel.StressTest };
        await _httpClient.PostAsJsonAsync<StartTestRequest>("TestControl", request);

        _teststatus.TestStarted("Started Stress Test!");
    }

    #region WebSocket connection
    protected override async Task OnInitializedAsync()
    {
        string url = $"ws://{_httpClient.BaseAddress.Host}:{_httpClient.BaseAddress.Port}/TestControl/ws";

        try
        {
            await _webSocket.ConnectAsync(new Uri(url), _disposalTokenSource.Token);
            _ = ReceiveLoop();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    async Task ReceiveLoop()
    {
        var buffer = new ArraySegment<byte>(new byte[1024]);
        while (!_disposalTokenSource.IsCancellationRequested)
        {
            // Note that the received block might only be part of a larger message. If this applies in your scenario,
            // check the received.EndOfMessage and consider buffering the blocks until that property is true.
            // Or use a higher-level library such as SignalR.
            var received = await _webSocket.ReceiveAsync(buffer, _disposalTokenSource.Token);
            var receivedAsText = Encoding.UTF8.GetString(buffer.Array, 0, received.Count);

            var testUpdate = JsonSerializer.Deserialize<TestStatusUpdate>(receivedAsText);
            if (testUpdate.Completed)
            {
                _teststatus.TestCompleted(testUpdate.Message);
            }
            else
            {
                _teststatus.TestStarted(testUpdate.Message);
            }

            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _disposalTokenSource.Cancel();
        _ = _webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bye", CancellationToken.None);
    }
    #endregion

    class TestStatus
    {
        public bool TestRunning { get; private set; } = false;
        public string TestStatusMessage { get; private set; } = string.Empty;

        public void TestStarted(string message)
        {
            TestStatusMessage = message;
            TestRunning = true;
        }

        public void TestCompleted(string message)
        {
            TestStatusMessage = message;
            TestRunning = false;
        }
    }
}

